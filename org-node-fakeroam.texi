\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename org-node-fakeroam.info
@settitle org-node-fakeroam
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@dircategory Emacs
@direntry
* Org-node Fakeroam: (org-node-fakeroam). Integrate org-roam and org-node.
@end direntry

@finalout
@titlepage
@title org-node-fakeroam
@author Martin Edstr√∂m
@end titlepage

@ifnottex
@node Top
@top org-node-fakeroam
@end ifnottex

@menu
* Not just compatibility::
* Getting started::
* Bonus setup::

@detailmenu
--- The Detailed Node Listing ---

Bonus setup

* Speeding up the backlinks buffer::
* Speeding up the org-roam DB::
* Misc::

Misc

* Tip Rebuilding the Roam DB::
* Tip On very slow filesystems::
* Tip Word-wrap in the Roam buffer?::

@end detailmenu
@end menu

@node Not just compatibility
@chapter Not just compatibility

This package can be used in one of two ways: purely to speed up some parts of org-roam, or to use org-node side-by-side with org-roam.

@node Getting started
@chapter Getting started

These settings help you feel at home using both org-roam and @uref{https://github.com/meedstrom/org-node, org-node} side-by-side:

@lisp
(setq org-node-creation-fn #'org-node-fakeroam-new-via-roam-capture)
(setq org-node-slug-fn #'org-node-fakeroam-slugify-via-roam)
(setq org-node-datestamp-format "%Y%m%d%H%M%S-")
@end lisp

Make sure the underlying org-id package knows about the files org-roam knows about.  You'd think it would, but that isn't a given!  Do either of these two:

@enumerate
@item
Run @samp{M-x org-roam-update-org-id-locations} every now and then.

@item
Edit the following setting so it includes your @samp{org-roam-directory}.  Supposing that is "~/org/", set this:
@end enumerate

@lisp
(setq org-node-extra-id-dirs '("~/org/"))
@end lisp

Finally, run @samp{M-x org-node-reset} or just restart Emacs.  Now org-node's commands should function with minimum surprises.

@node Bonus setup
@chapter Bonus setup

@menu
* Speeding up the backlinks buffer::
* Speeding up the org-roam DB::
* Misc::
@end menu

@node Speeding up the backlinks buffer
@section Speeding up the backlinks buffer

Enable this mode:

@lisp
(org-node-fakeroam-fast-render-mode) ;; build the Roam buffer faster
@end lisp

You can also enhance the mode by persisting on disk all the preview snippets.  The only reason it's not done by default is that it stores potentially world-readable text under "~/.emacs.d", and it's up to you to judge if that's a problem.

You'd think that this only affects someone who often restarts Emacs, but the nature of notes is such that you can go months between revisits of a given note, and it's so nice for the buffer to still be instant.

@lisp
(org-node-fakeroam-setup-persistence) ;; cache previews on disk
@end lisp

@node Speeding up the org-roam DB
@section Speeding up the org-roam DB

If big files are slow to save, this section is for you.  We will turn off some org-roam stuff and instruct it to look up org-node tables.

BIG PROVISO: if you depend a lot on org-ref, do not proceed!

The org-node tables only contain org-ref v3 citations that were within bracketed links that start with "cite", such as @samp{[[citealt:&demski2019]]}, but not @samp{[[fnotecite:&ioannidis2005]]} since it does not start with "cite", nor @samp{citealt:&fallenstein2015} since it is not wrapped in brackets.

First, let's stop the @samp{org-roam-db-autosync-mode} from doing anything on save.  Either turn it off, or apply the following settings.

@lisp
(setq org-roam-db-update-on-save nil) ;; don't update DB on save, not needed
(setq org-roam-link-auto-replace nil) ;; don't look for "roam:" links on save
@end lisp

If you turn it off, you may want to enable the following mode.  The autosync mode did a lot of unrelated things under one umbrella, such as this, which refreshes the visible Roam buffer when the cursor moves into a different entry or the buffer changes.

@lisp
(org-node-fakeroam-redisplay-mode) ;; autorefresh the Roam buffer
@end lisp

Now for the magic trick.  Enable one @emph{or both} of the following modes.

@lisp
(org-node-fakeroam-db-feed-mode) ;; keep Roam DB up to date
(org-node-fakeroam-jit-backlinks-mode) ;; skip DB for Roam buffer
@end lisp

What do they do?  The @strong{DB-Feed-Mode} keeps the org-roam DB up to date, by writing to it on save.  Use it if you have various Roam extensions that need the DB@.  It should be fast, but may still not be instant on a large file.

The @strong{JIT-Backlinks-Mode} will generate backlinks for the Roam buffer out of org-node's tables, so that no DB is needed for this purpose.  That's right, you can delete the org-roam.db file and the Roam buffer keeps on working!

@node Misc
@section Misc

@menu
* Tip Rebuilding the Roam DB::
* Tip On very slow filesystems::
* Tip Word-wrap in the Roam buffer?::
@end menu

@node Tip Rebuilding the Roam DB
@subsection Tip: Rebuilding the Roam DB

If you often have reason to full-reset the DB, there is a faster command than @samp{C-u M-x org-roam-db-sync}.  Try @samp{M-x org-node-fakeroam-db-rebuild}.  Benchmark on my device:

@itemize
@item
@samp{C-u M-x org-roam-db-sync}: 179 seconds
@item
@samp{M-x org-node-fakeroam-db-rebuild}: 6 seconds
@end itemize

Fair warning: a couple of data points will differ.

@itemize
@item
Each node will only record local properties, not all inherited properties
@item
Files' recorded atime will be copied from the mtime
@item
Files' recorded content-hash will be the blank string ""
@item
(As mentioned earlier) Not all org-ref citations are picked up
@end itemize

This is a place where I request contributions, since 6 seconds still seems a lot @emph{slower} than it needs to be.  I envisioned running this function on every save -- that's obviously not possible yet.  The bottleneck seems to be in how EmacSQL is being called.

@node Tip On very slow filesystems
@subsection Tip: On very slow filesystems

I hear that on Termux on Android, filesystem access can be so slow that it's a pain to cycle dailies with org-roam (@uref{https://github.com/meedstrom/org-node/issues/24#issuecomment-2278605819, 11 seconds just to goto next daily}!).  A Redditor also said Apple NFS is not ideal for Emacs.

Good news.  You can override some functions to make them look up org-node tables and avoid the filesystem:

@lisp
(advice-add #'org-roam-list-files :override
            #'org-node-fakeroam-list-files)

(advice-add #'org-roam-dailies--list-files :override
            #'org-node-fakeroam-list-dailies)

(advice-add #'org-roam-dailies--daily-note-p :override
            #'org-node-fakeroam-daily-note-p)
@end lisp

@node Tip Word-wrap in the Roam buffer?
@subsection Tip: Word-wrap in the Roam buffer?

This has nothing to do with org-node, but I actually didn't know this for ages.

If you don't hard-wrap but prefer visual-line-mode or similar (@uref{https://github.com/org-roam/org-roam/issues/1862, org-roam#1862}), you have to enable such modes yourself -- it sensibly doesn't inherit your Org hooks:

@lisp
(add-hook 'org-roam-mode-hook #'visual-line-mode)
@end lisp

@bye
